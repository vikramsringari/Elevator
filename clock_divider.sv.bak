module clock_divider (clock, divided_clocks);
 input logic clock;
 output logic [31:0] divided_clocks;

 initial
 divided_clocks <= 0;

 always_ff @(posedge clock)
 divided_clocks <= divided_clocks + 1;
endmodule 

module clock_divider_testbench();
	logic clock, divided_clocks;
	
	clock_divider dut (.clock, .divided_clocks);
	
	// Set up the clock
	parameter CLOCK_PERIOD = 100;
	initial clk = 1;
	always begin
		#(CLOCK_PERIOD / 2);
		clk = ~clk;
	end 
	
	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin
		
		clock <= 0; 					 			@(posedge clk);
														@(posedge clk);
		clock <= 1;				 					@(posedge clk);
														@(posedge clk);
		clock <= 1;				 					@(posedge clk);
														@(posedge clk);
		clock <= 0;									@(posedge clk);
														@(posedge clk);
		clock <= 1;              				@(posedge clk);
														@(posedge clk);	
			$stop;
	end
endmodule	